create table "public"."rooms" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "name" text not null,
    "description" text not null,
    "is_active" boolean not null default true,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now()
);

comment on table "public"."rooms" is 'Table containing all the rooms for a given user';

alter table "public"."rooms" enable row level security;

CREATE UNIQUE INDEX rooms_name_key ON public.rooms USING btree (name);

CREATE UNIQUE INDEX rooms_pkey ON public.rooms USING btree (id);

alter table "public"."rooms" add constraint "rooms_pkey" PRIMARY KEY using index "rooms_pkey";

alter table "public"."rooms" add constraint "rooms_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users" ("id") ON DELETE CASCADE not valid;

grant delete on table "public"."rooms" to "anon";

grant insert on table "public"."rooms" to "anon";

grant references on table "public"."rooms" to "anon";

grant select on table "public"."rooms" to "anon";

grant trigger on table "public"."rooms" to "anon";

grant truncate on table "public"."rooms" to "anon";

grant update on table "public"."rooms" to "anon";

grant delete on table "public"."rooms" to "authenticated";

grant insert on table "public"."rooms" to "authenticated";

grant references on table "public"."rooms" to "authenticated";

grant select on table "public"."rooms" to "authenticated";

grant trigger on table "public"."rooms" to "authenticated";

grant truncate on table "public"."rooms" to "authenticated";

grant update on table "public"."rooms" to "authenticated";

grant delete on table "public"."rooms" to "service_role";

grant insert on table "public"."rooms" to "service_role";

grant references on table "public"."rooms" to "service_role";

grant select on table "public"."rooms" to "service_role";

grant trigger on table "public"."rooms" to "service_role";

grant truncate on table "public"."rooms" to "service_role";

grant update on table "public"."rooms" to "service_role";

--------------------------------------------------------
-- Policies
--------------------------------------------------------

create policy "User can only see their own rooms"
on "public"."rooms"
as permissive
for select
to authenticated
using (user_id = (select id from public.users where auth.uid() = id));

create policy "User can only update their own rooms"
on "public"."rooms"
as permissive
for update
to authenticated
using (user_id = (select id from public.users where auth.uid() = id));

create policy "User can only delete their own rooms"
on "public"."rooms"
as permissive
for delete
to authenticated
using (user_id = (select id from public.users where auth.uid() = id));

create policy "User can only insert rooms for themselves"
on "public"."rooms"
as permissive
for insert
to authenticated
with check (user_id = (select id from public.users where auth.uid() = id));

--------------------------------------------------------
-- Triggers and Functions
--------------------------------------------------------

create or replace function prevent_user_id_update_function()
    returns trigger
    language plpgsql
    security DEFINER
    set search_path TO ''
as $function$
begin
    NEW.user_id = OLD.user_id;
end;
$function$;

create trigger prevent_user_id_update_trigger
    before update on "public"."rooms"
    for each row
    execute function prevent_user_id_update_function();

comment on function prevent_user_id_update_function() is 'Prevent user_id from being updated, as it should be immutable';
